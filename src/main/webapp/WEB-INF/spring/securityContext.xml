<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
              http://www.springframework.org/schema/security 
              http://www.springframework.org/schema/security/spring-security.xsd 
              http://www.springframework.org/schema/context
               http://www.springframework.org/schema/context/spring-context-4.2.xsd">

	<!-- Enable auto-wiring -->
	<context:annotation-config />

	<!-- Scan for auto-wiring classes in spring saml packages -->
	<context:component-scan base-package="org.springframework.security.saml" />

	<!-- Unsecured pages -->
	<!-- CUSTOMIZE: URLs that do not require authentication -->
	<security:http security="none" pattern="/favicon.ico" />
	<security:http security="none" pattern="/images/**" />
	<security:http security="none" pattern="/css/**" />
	<security:http security="none" pattern="/LoginForm.jsp" />

	<!-- Secured pages with SAML as entry point -->
	<security:http entry-point-ref="samlEntryPoint"
		use-expressions="false">
		<!-- Require SAML authentication for all other URLs -->
		<security:intercept-url pattern="/**"
			access="IS_AUTHENTICATED_FULLY" />
		<security:custom-filter before="FIRST"
			ref="metadataGeneratorFilter" />
		<security:custom-filter after="BASIC_AUTH_FILTER"
			ref="samlFilter" />
	</security:http>

	<!-- Central storage of cryptographic keys -->
	<bean id="keyManager" class="org.springframework.security.saml.key.JKSKeyManager">
		<!-- CUSTOMIZE: do NOT alter the order of the contents of this bean declaration -->
		<!-- CUSTOMIZE: classpath of JKS file containing the SP private-key/public-cert 
			pair -->
		<constructor-arg value="classpath:sp.jks" />
		<!-- CUSTOMIZE: the password for both the keystore and private-key/public-cert 
			pair -->
		<constructor-arg type="java.lang.String" value="changeit" />
		<!-- CUSTOMIZE: the alias for the SP private-key/public-cert pair -->
		<constructor-arg type="java.lang.String" value="spkeyalias" />
		<constructor-arg>
			<map>
				<!-- CUSTOMIZE: repeat the same String definitions of the alias and password 
					here -->
				<entry key="spkeyalias" value="changeit" />
			</map>
		</constructor-arg>
	</bean>

	<!-- IDP Metadata configuration - paths to metadata of IDPs in circle of 
		trust is here -->
	<bean id="metadata"
		class="org.springframework.security.saml.metadata.CachingMetadataManager">
		<constructor-arg>
			<list>
				<!-- Example of classpath metadata with Extended Metadata -->
				<bean
					class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
					<constructor-arg>
						<bean
							class="org.opensaml.saml2.metadata.provider.ResourceBackedMetadataProvider">
							<constructor-arg>
								<bean class="java.util.Timer" />
							</constructor-arg>
							<constructor-arg>
								<bean class="org.opensaml.util.resource.ClasspathResource">
									<!-- CUSTOMIZE: classpath location and file containing IDP metadata -->
									<constructor-arg value="/idp.xml" />
								</bean>
							</constructor-arg>
							<property name="parserPool" ref="parserPool" />
						</bean>
					</constructor-arg>
					<constructor-arg>
						<bean
							class="org.springframework.security.saml.metadata.ExtendedMetadata">
						</bean>
					</constructor-arg>
				</bean>
			</list>
		</constructor-arg>
		<!-- CUSTOMIZE: place the entityID of the IDP -->
		<property name="defaultIDP" value="https://idp.testshib.org/idp/shibboleth" />
	</bean>

	<!-- Filters for processing of SAML messages -->
	<bean id="samlFilter" class="org.springframework.security.web.FilterChainProxy">
		<security:filter-chain-map request-matcher="ant">
			<security:filter-chain pattern="/saml/login/**"
				filters="samlEntryPoint" />
			<security:filter-chain pattern="/saml/logout/**"
				filters="samlLogoutFilter" />
			<security:filter-chain pattern="/saml/metadata/**"
				filters="metadataDisplayFilter" />
			<security:filter-chain pattern="/saml/SSO/**"
				filters="samlWebSSOProcessingFilter" />
			<security:filter-chain pattern="/saml/SingleLogout/**"
				filters="samlLogoutProcessingFilter" />
		</security:filter-chain-map>
	</bean>

	<!-- Handler deciding where to redirect user after successful login -->
	<bean id="successRedirectHandler"
		class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<!-- CUSTOMIZE: change this to the URL to which authenticated users should 
			be redirected -->
		<property name="defaultTargetUrl" value="/landingPage" />
		<property name="alwaysUseDefaultTargetUrl" value="true" />
	</bean>

	<!-- Handler deciding where to redirect user after failed login -->
	<bean id="failureRedirectHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<property name="useForward" value="true" />
		<!-- CUSTOMIZE: location of the error page if authentication fails -->
		<property name="defaultFailureUrl" value="/error.jsp" />
	</bean>

	<!-- Handler for successful logout -->
	<bean id="successLogoutHandler"
		class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
		<!-- CUSTOMIZE: location of the logout page if and only if using SAML logout -->
		<property name="defaultTargetUrl" value="/logout.jsp" />
	</bean>

	<security:authentication-manager alias="authenticationManager">
		<!-- Register authentication manager for SAML provider -->
		<security:authentication-provider
			ref="samlAuthenticationProvider" />
	</security:authentication-manager>

	<!-- Logger for SAML messages and events -->
	<bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger">
		<property name="logErrors" value="true" />
		<property name="logMessages" value="true" />
	</bean>

	<!-- Entry point to initialize authentication, default values taken from 
		properties file -->
	<bean id="samlEntryPoint" class="org.springframework.security.saml.SAMLEntryPoint">
		<property name="defaultProfileOptions">
			<bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
				<property name="includeScoping" value="false" />
			</bean>
		</property>
	</bean>

	<!-- Filter automatically generates default SP metadata -->
	<bean id="metadataGeneratorFilter"
		class="org.springframework.security.saml.metadata.MetadataGeneratorFilter">
		<constructor-arg>
			<bean class="org.springframework.security.saml.metadata.MetadataGenerator">
				<!-- CUSTOMIZE: replace this with the URL and context-root of your application -->
				<property name="entityBaseURL" value="http://www.example.com:8080/SAMLsample" />
				<property name="extendedMetadata">
					<bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
						<property name="signMetadata" value="true" />
						<property name="signingAlgorithm"
							value="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" />
						<!-- other possible values include the following, but rsa-sha1 is default -->
						<!-- http://www.w3.org/2000/09/xmldsig#rsa-sha1 -->
						<!-- http://www.w3.org/2001/04/xmldsig-more#rsa-sha512 -->
					</bean>
				</property>
			</bean>
		</constructor-arg>
	</bean>

	<!-- The filter is waiting for connections on URL suffixed with filterSuffix 
		and presents SP metadata there -->
	<bean id="metadataDisplayFilter"
		class="org.springframework.security.saml.metadata.MetadataDisplayFilter" />

	<!-- SAML Authentication Provider responsible for validating of received 
		SAML messages -->
	<bean id="samlAuthenticationProvider"
		class="org.springframework.security.saml.SAMLAuthenticationProvider">
		<!-- START: Added on April 8 for ADMail attribute -->
		<property name="forcePrincipalAsString" value="false" />
		<property name="userDetails" ref="emailUserDetails" />
		<!-- END: Added on April 8 -->
	</bean>

	<!-- START: Added on April 8 for ADMail Attribute -->
	<bean id="emailUserDetails" class="com.example.saml.userdetails.EmailUserDetails" />
	<!-- END: Added on April 8 for ADMail Attribute -->

	<!-- Provider of default SAML Context -->
	<bean id="contextProvider"
		class="org.springframework.security.saml.context.SAMLContextProviderLB">
		<property name="scheme" value="http" />
		<!-- CUSTOMIZE: replace with the domain of the applicaiton URL -->
		<property name="serverName" value="www.example.com" />
		<property name="serverPort" value="8080" />
		<property name="includeServerPortInRequestURL" value="true" />
		<!-- CUSTOMIZE: replace with the context-root of the application -->
		<property name="contextPath" value="/SAMLsample" />
	</bean>

	<!-- Processing filter for WebSSO profile messages -->
	<bean id="samlWebSSOProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationSuccessHandler" ref="successRedirectHandler" />
		<property name="authenticationFailureHandler" ref="failureRedirectHandler" />
	</bean>

	<!-- Logout handler terminating local session -->
	<bean id="logoutHandler"
		class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
		<property name="invalidateHttpSession" value="false" />
	</bean>

	<!-- Override default logout processing filter with the one processing SAML 
		messages -->
	<bean id="samlLogoutFilter" class="org.springframework.security.saml.SAMLLogoutFilter">
		<constructor-arg index="0" ref="successLogoutHandler" />
		<constructor-arg index="1" ref="logoutHandler" />
		<constructor-arg index="2" ref="logoutHandler" />
	</bean>

	<!-- Filter processing incoming logout messages -->
	<!-- First argument determines URL user will be redirected to after successful 
		global logout -->
	<bean id="samlLogoutProcessingFilter"
		class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
		<constructor-arg index="0" ref="successLogoutHandler" />
		<constructor-arg index="1" ref="logoutHandler" />
	</bean>

	<!-- Class loading incoming SAML messages from httpRequest stream -->
	<bean id="processor"
		class="org.springframework.security.saml.processor.SAMLProcessorImpl">
		<constructor-arg>
			<list>
				<ref bean="redirectBinding" />
				<ref bean="postBinding" />
			</list>
		</constructor-arg>
	</bean>

	<!-- SAML 2.0 WebSSO Assertion Consumer -->
	<bean id="webSSOprofileConsumer"
		class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl" />

	<!-- SAML 2.0 Web SSO profile -->
	<bean id="webSSOprofile"
		class="org.springframework.security.saml.websso.WebSSOProfileImpl" />

	<bean id="hokWebSSOprofileConsumer"
		class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl" />

	<!-- SAML 2.0 Logout Profile -->
	<bean id="logoutprofile"
		class="org.springframework.security.saml.websso.SingleLogoutProfileImpl" />

	<!-- Bindings, encoders and decoders used for creating and parsing messages -->
	<bean id="postBinding"
		class="org.springframework.security.saml.processor.HTTPPostBinding">
		<constructor-arg ref="parserPool" />
		<constructor-arg ref="velocityEngine" />
	</bean>

	<bean id="redirectBinding"
		class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
		<constructor-arg ref="parserPool" />
	</bean>

	<!-- Initialization of OpenSAML library -->
	<bean class="org.springframework.security.saml.SAMLBootstrap" />

	<!-- Initialization of the velocity engine -->
	<bean id="velocityEngine" class="org.springframework.security.saml.util.VelocityFactory"
		factory-method="getEngine" />

	<!-- XML parser pool needed for OpenSAML parsing -->
	<bean id="parserPool" class="org.opensaml.xml.parse.StaticBasicParserPool"
		init-method="initialize" />

	<bean id="parserPoolHolder"
		class="org.springframework.security.saml.parser.ParserPoolHolder" />

</beans>
